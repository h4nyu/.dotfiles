
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo ='rhysd/clever-f.vim'

[[plugins]]
repo ='junegunn/fzf'
build = './install'

[[plugins]]
repo ='junegunn/fzf.vim'
depends = ['fzf']
hook_add='''
nnoremap <Space><Space> :FZF<CR>
nnoremap <Space>fc :Files %:p:h<CR>
nnoremap <Space>gf :GFiles<CR>
nnoremap <Space>b :Buffers<CR>
nnoremap <Space>h :History<CR>
nnoremap <Space>c :Commits<CR>
nnoremap <Space>l :Lines<CR>
nnoremap <Space>/ :BLines<CR>
nnoremap <Space>a :Ag<Space>
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add='''
source ~/.vim/plugins/nerdcommenter.vim
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
source ~/.vim/plugins/colorscheme.vim
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
source ~/.vim/plugins/indentline.vim
'''

[[plugins]]
repo = 'scrooloose/syntastic'
hook_post_source = '''
source ~/.vim/plugins/syntastic.vim
'''

[[plugins]]
repo = 'tpope/vim-fugitive' 
hook_add = '''
source ~/.vim/plugins/fugitive.vim
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
source ~/.vim/plugins/lightline.vim
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'
hook_add = '''
let g:AutoPairsMapCR = 0
'''


[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
hook_add = '''
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''



[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
source ~/.vim/plugins/vim-rooter.vim
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['roxma/nvim-yarp', 'roxma/vim-hug-neovim-rpc']
hook_add = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1
imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
inoremap <expr><CR> pumvisible() ? deoplete#mappings#close_popup() : "\<CR>"
'''

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'tshirtman/vim-cython'

[[plugins]]
repo = 'mhinz/vim-signify'


[[plugins]]
repo ='junegunn/vim-easy-align'
hook_add='''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo ='cohama/lexima.vim'

[[plugins]]
repo = "sheerun/vim-polyglot"

[[plugins]]
repo = "christoomey/vim-tmux-navigator"

[[plugins]]
repo = "benmills/vimux"
hook_add='''
function! s:compile_and_run()
    exec 'wa'
    call VimuxRunCommand('clear') 
    if &filetype == 'c'
        call VimuxRunCommand('gcc % -o %<; time ./' . expand('%<')) 
    elseif &filetype == 'sh'
        call VimuxRunCommand('bash ' . expand('%')) 
    elseif &filetype == 'python'
        call VimuxRunCommand('python ' . expand('%')) 
    elseif &filetype == 'python.pytest'
        call VimuxRunCommand('pytest --capture=no ' . expand('%')) 
    elseif &filetype == 'ruby'
        call VimuxRunCommand('ruby ' . expand('%')) 
    elseif &filetype == 'plantuml'
        call VimuxRunCommand('plantuml ' . expand('%')) 
    endif
endfunction

nnoremap <Space>r :call <SID>compile_and_run()<CR>
nnoremap <Space>e :<C-u>VimuxPromptCommand<CR>
nnoremap <Space>el :<C-u>VimuxRunLastCommand<CR>
nnoremap <Space>i :<C-u>VimuxInspectRunner<CR>
'''

[[plugins]]
repo = "edkolev/tmuxline.vim"
hook_add='''
let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
    \'a'    : '#S',
    \'b'    : '#W',
    \'c'    : '#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)',
    \'cwin' : ['#I', '#W'],
    \'win'  : ['#I', '#W'],
    \'x'    : '#{?client_prefix,Prefix,      }',
    \'y'    : ['%a', '%e-%b-%Y', '%l:%M%p'],
    \'z'    : '#h'}
'''


[[plugins]]
repo = "plasticboy/vim-markdown"
hook_add='''
let g:vim_markdown_conceal = 0
'''

[[plugins]]
repo = 'alvan/vim-closetag'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add='''
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_start_word_key      = 'g<C-n>'
let g:multi_cursor_select_all_word_key = 'g<A-n>'
let g:multi_cursor_start_key           = '<C-n>'
let g:multi_cursor_select_all_key      = '<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = 'q'
'''

[[plugins]]
repo = 'Chiel92/vim-autoformat'
hook_add='''
nnoremap <leader>f :<C-u>Autoformat <CR>:<C-u>:w<CR>
'''
